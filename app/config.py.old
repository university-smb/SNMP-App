

# importer library
import json

from level import OidLevel



# Initialisation des fichier equipement,OIDs et ....
# SI ils sont vide ajouter les context
# Sinon lire







# nom des fichier json
f_equipements = "BDD/equipements.json"
f_oid_high_level = "OID/OID_high_level.json"
f_oid_low_level = "OID/OID_low_level.json"




# fonction qui prend comme parametre le nom de fichier json qui nous retourne le contenu de fichier 
def open_json_file(nom_de_fichier_json):
    with open(nom_de_fichier_json, 'r') as f:
        data = json.load(f)

    return data





# chargement de contenu du fichier json
ficheir_equipements = open_json_file(f_equipements)
OID_low_level = open_json_file(f_oid_low_level)
OID_high_level = open_json_file(f_oid_high_level)







# GET Mikrotik OIDs
m_R_l = OID_low_level['Mikrotik']['Routeur'].values()
m_R_h = OID_high_level['Mikrotik']['Routeur'].values()

#print(m_R_l)



# level OID
oid_level_low =  OidLevel(m_R_l)
oid_level_high = OidLevel(m_R_h)



#print(oid_level_low.level)
#print(oid_level_high.level)




# Tableau pour stocker le resultat de SNMP
res = []



# association d'un equipement avec une module de OID

#print(OID_high_level["Mikrotik"]['Routeur'].values())




# Longueure d'équipements
length_equipements = len(ficheir_equipements['equipement'])

# Tableau d'équipements
equipements = ficheir_equipements['equipement']




i = 0
while i < length_equipements :

    constructeur = equipements[i]['constructeur']
    equipement = equipements[i]['type_de_material']
    ip = equipements[i]['IP']
    dns = equipements[i]['DNS']
    description = equipements[i]['description']
    level = equipements[i]['level']


    print(level)




    i = i + 1


for obj in oid_level_high.level:
    print( obj, sep =' ')



"""

pour ajouter un nouveau material il fault utilise le formati suivant:
my_data['Mikrotik']['nouveau_material_name'] = new_data

si le categorie de material existe déja utilse:
my_data['Mikrotik']['switch'].append(new_data)

"""
















"""
class Config:
    

    def __init__(self, equipements):
        self.equipements = equipements




    # Fonction pour ajouter nouveau equipement
    def add_device(self, constructeur, type_de_material, IP, DNS, description):

        # check if equipement is empty
        if len(self.equipements == 0):
            self.equipements =  {"equipement": []}

        new_device = {
            "constructeur": constructeur,
            "type_de_material": type_de_material,
            "IP": IP,
            "DNS": DNS,
            "description": description
        }

        self.equipements['equipement'].append(new_device)



    # verifier si l'equipement existe déjà
    def device_existe(self, ip):

        # 
        for equipement in self.equipements['equipement']:
            if ip == equipement['IP']:
                return True
        return False


"""




